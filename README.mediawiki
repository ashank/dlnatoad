= DLNAtoad =

== What is this? ==

A minimal DLNA video server in a single jar.  On start up it will index the working directory and make any videos found available via DLNA.

== Why? ==

The few good free DLNA server implementations I found online were clunky with awkward config.  I wanted something that was ultra simple without any extra (unsecured) admin APIs I do not want but which will always be a (if minor) security worry.

== How do I use it? ==

It compiles to a runnable jar.  Run it in the top directory you want to share.  Your DLNA device should magically detect it on your LAN.  DLNA is magical like that.  Media files are identified purely on file extension.  Known extensions are .avi, .flv, .m4v, .mkv, .mp4, .mpeg, .mpg, .wmv, .mp3 and .ogg.

== Any configuration? ==

You can include multiple root directories:
 java -jar dlnatoad.jar foo/ bar/

== How can I compile it? ==

Its a Maven project.

 mvn clean install
 java -jar target/dlnatoad-0.0.1-SNAPSHOT-jar-with-dependencies.jar

== How does it work? ==

It advertises its self on the LAN and provides simple directory listing service via UPnP (using the Cling library).  When the renderer wants to play a video file it fetches it via HTTP from the embedded Jetty server.  The RANGE header is used to fetch parts of files.

== What does it use? ==

=== Cling ===

A very useful set of libraries for working with UPnP.

http://4thline.org/projects/cling/

=== Jetty 8 ===

Provides a HTTP server implementation that directly supports the RANGE header for serving the actual content.

http://www.eclipse.org/jetty/

=== 3rd party code in this repository ===

Some classes are based on code from WireMe and are used under the Apache 2 License.  WireMe was also used as a general example of how to expose content via DLNA using the Cling library.  See https://code.google.com/p/wireme/ for more details.

